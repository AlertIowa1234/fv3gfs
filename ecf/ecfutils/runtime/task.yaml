# This file defines defaults for tasks in the suite definitions.
# Individual tasks in the suite may override some settings

task_template: &task_template

  # Template - specifies a schema that is used to validate the variables in this scope.
  Template: *task_schema

  # rocoto_load_modules - commands to run before passing control to
  # the j-jobs (jobs/ directory) in Rocoto:
  rocoto_load_modules: !expand >-
     {doc.platform.get("rocoto_load_modules_extra","")}
     source &HOMEgfs;/ush/load_fv3gfs_modules.sh {task_type} ;
     module list

  # rocoto_command - command rocoto executes to pass control to the
  # j-job (jobs/ directory) for this task.
  rocoto_command: !expand >-
     {rocoto_load_modules} ;
     &HOMEgfs;/jobs/{J_JOB}

  # ecflow_command - command ecFlow executes from the ecf file to pass
  # control to the j-job (jobs/ directory) for this task.
  ecflow_command: !expand "${{HOMEgfs}}/jobs/{J_JOB}"

  # Rocoto - contents of the Rocoto <task> tag for this task,
  # excluding the <dependency> tag, which is automatically generated
  # in CROW/crow/metascheduler/rocoto.py
  Rocoto: !expand |
    <command>sh -c '{rocoto_command}'</command>
    {sched.rocoto_accounting(accounting,jobname=task_path_var,
        outerr="<cyclestr>&LOG_DIR;/@Y@m@d@H/"+task_path_var+".log</cyclestr>")}
    {sched.rocoto_resources(resources)}
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
    <envar><name>EXPDIR</name><value>&EXPDIR;</value></envar>
    <envar><name>CDUMP</name><value>{CDUMP}</value></envar>
    <envar><name>RUN_ENVIR</name><value>emc</value></envar>
    <envar><name>HOMEgfs</name><value>&HOMEgfs;</value></envar>
    {rocoto_more_vars}
    {rocoto_platform_vars}

  # rocoto_platform_vars - allows the platform definition file
  # (platforms/*.yaml) to add <native> tags to the Rocoto <task>
  # definition.
  rocoto_platform_vars: !calc " doc.platform.get('rocoto_platform_vars','') "

  # RUN - Contents of the RUN variable in the ecFlow suite "edit"
  # variables and Rocoto XML entities.  This specifies whether the
  # task is for gfs or gdas.
  RUN: !calc task_path_list[0]

  # CDUMP - alias for RUN expected by development scripts
  CDUMP: !calc RUN

  ecf_dev_overrides: !expand |
    # Set data and logs to locations specified in the suite definition.
    # This is needed when running without write access to the NCO com areas.
    export DATAROOT=%DATAROOT%
    export jlogfile=%COM%/logs/jlogfile
    export COMROOT=%COM%
    export cycle=t%CYC%z
    export CDATE=%PDY%%CYC%
    export EXPDIR="{doc.places.EXPDIR}"

  ecf_more_exports: ""

  # more_vars - Additional environment variables to pass to the j-job
  # through the Rocoto XML or ecFlow ecf files.  This variable is only used
  # if the task does not override the ecf_more_exports, rocoto_more_vars,
  # or ecflow_def_more_vars variables.
  more_vars: []

  # ecf_more_exports - additional shell "export" statements to include in
  # this task's ecf file.
  ecf_more_exports: !calc |
    "\n".join([ tools.expand("export {VAR}=%{VAR}%\n",VAR=V) for V in more_vars ])

  # rocoto_more_vars - additional variables to set in the Rocoto <task> tag's
  # <envar> elements.
  rocoto_more_vars: !calc |
    "\n".join([ metasched.defenvar(VAR,this[VAR]) for VAR in more_vars ])

  # ecflow_def_more_vars - additional variables to set in the ecflow
  # suite definition "edit" statements for this task.  This is only
  # used if the task does not override ecflow_def.
  ecflow_def_more_vars: !calc |
    "\n".join([ metasched.defenvar(VAR,this[VAR]) for VAR in more_vars ])

  # ecflow_def - the contents of this variable are sent into the task
  # definition in the ecflow suite definition file.  The
  # CROW/crow/metascheduler/ecflow.py copies this variable's contents
  ecflow_def: !calc ecflow_def_more_vars

  # ecf_file - the contents of this variable are written to the ecf
  # file for each task by the CROW/crow/metascheduler/ecflow.py
  # python module.
  ecf_file: !expand |
    #! /bin/sh
    {ecf_batch_resources}
    {ecf_dev_overrides}
    %include <head.h>
    %include <envir-xc40.h>

    set -x

    {ecf_resource_more}

    # Workaround for vrfy bug
    mkdir -p %COM%/logs/%PDY%%CYC%/
    
    export HOMEgfs=%HOMEgfs%
    export CDUMP=%RUN%
    {ecf_more_exports}
    ## don't include <model_ver.h>

    ############################################################
    # Load modules
    ############################################################
    #. $MODULESHOME/init/sh
    {ecf_module_commands}
    module load ecflow
    module list

    #############################################################
    # WCOSS environment settings
    #############################################################

    {ecf_environment_settings}

    ###########################################################
    export cyc=%CYC%

    # CALL executable job script here
    {ecflow_command}

    %include <tail.h>
    %manual
    {ecf_manual}
    %end

  # ecf_manual - contents of the manual entry for this task in ecflow
  ecf_manual: |
    # FIXME: Insert manual for this job.

  # ecf_module_commands - these commands are sent to the ecf file for
  # this task to load any modules that are required for the job
  ecf_module_commands: |-
    source "$HOMEgfs/ush/load_fv3gfs_modules.sh" {task_type}

  ecf_environment_settings: |-
    # Set tuning variables like KMP_AFFINITY and OMP_STACKSIZE here.

  # ecf_batch_resources - generates batch card settings for the ecflow ecf file
  ecf_batch_resources: !expand |-
    {sched.batch_accounting(accounting,jobname=task_path_var,outerr="%ECF_OUT%/%EMCPEN%_%PDY%%CYC%_"+task_path_var+".log")}
    {sched.batch_resources(resources)}

  # ecf_resource_more - generates the ntasks, ptile, and threads variables
  # in cases where they are needed
  ecf_resource_more: !expand |-
    {ecf_maybe_ntasks}
    {ecf_maybe_ptile}
    {ecf_maybe_threads}

  # ecf_maybe_ntasks - generates the ntasks variable for any MPI jobs'
  # ecf files, which specifies the number of MPI ranks.
  ecf_maybe_ntasks: !FirstTrue
    - when: !calc resources.total_ranks()>0
      do: !expand 'export ntasks={resources.total_ranks()}'
    - otherwise: "# No MPI in use, so I am not setting $ntasks."

  # ecf_maybe_threads - generates the ntasks variable for any OpenMP
  # jobs' ecf files.  This variable specifies the number of OpenMP threads
  ecf_maybe_threads: !FirstTrue
    - when: !calc resources.has_threads()
      do: !expand 'export threads={resources[0]["OMP_NUM_THREADS"]}'
    - otherwise: "# No OpenMP in use, so I am not setting $threads"

  # ecf_maybe_ptile - generates the ptile variable if this is an
  # OpenMP or MPI program.  The ptile variable specifies the number of
  # MPI ranks per node.
  ecf_maybe_ptile: !FirstTrue
    - when: !calc resources.has_threads() or resources.total_ranks()>0
      do: !expand 'export ptile={sched.max_ranks_per_node(resources)}'
    - otherwise: "# Neither OpenMP nor MPI are in use, so I am not setting $ptile"

# shared_accounting - information about accounting for jobs that share
# nodes with other jobs.  This is used by CROW/crow/sysenv/schedulers
# to generate batch cards and rocoto xml.
shared_accounting: &shared_accounting !calc >-
  doc.platform.shared_accounting_ref

# shared_accounting - information about accounting for jobs that must
# have access to tape archiving, network, or other limited
# availability resources.  This is used by CROW/crow/sysenv/schedulers
# to generate batch cards and rocoto xml.
service_accounting: &service_accounting !calc >-
  doc.platform.service_accounting_ref

# shared_accounting - information about accounting for jobs that share
# nodes with other jobs.  This is used by CROW/crow/sysenv/schedulers
# to generate batch cards and rocoto xml.
exclusive_accounting: &exclusive_accounting !calc >-
  doc.platform.exclusive_accounting_ref

# shared_task_template - a convenient alias to define a task that has
# the shared_accounting and passes "shared" to the
# load_fv3gfs_modules.sh
shared_task_template: &shared_task_template
  <<: *task_template
  accounting: *shared_accounting
  J_JOB: !expand '{task_path_list[-1]}.sh'
  task_type: shared

# service_task_template - a convenient alias to define a task that has
# the service_accounting and passes "service" to the
# load_fv3gfs_modules.sh
service_task_template: &service_task_template
  <<: *task_template
  accounting: *service_accounting
  J_JOB: !expand '{task_path_list[-1]}.sh'
  task_type: service

# exclusive_task_template - a convenient alias to define a task that has
# the exclusive_accounting and passes "exclusive" to the
# load_fv3gfs_modules.sh
exclusive_task_template: &exclusive_task_template
  <<: *task_template
  accounting: *exclusive_accounting
  J_JOB: !expand '{task_path_list[-1]}.sh'
  task_type: exclusive

# exclusive_task_template - a convenient alias for the special case of
# an exclusive_accounting job that runs a forecast.  These jobs must
# pass "forecast" to the load_fv3gfs_modules.sh.
forecast_task_template: &forecast_task_template
  <<: *exclusive_task_template
  task_type: forecast
