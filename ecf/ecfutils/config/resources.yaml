# This file is used to tell the underlying scripts how many threads or
# MPI ranks are used for various executed programs.  Many of the
# programs listed here are for the full workflow, such as analysis or
# ENKF jobs.  Hence, only a few of these are used.  Specifically, the
# ones in the post, fcst, and getic sections of the large "if" block.

config_resources:
  filename: "config.resources"
  content: !expand |
    #!/bin/ksh -x
    
    ########## config.resources ##########
    # Set resource information for job tasks
    # e.g. walltime, node, cores per node, memory etc.
    
    if [ $# -ne 1 ]; then
    
        echo "Must specify an input task argument to set resource variables!"
        echo "argument can be any one of the following:"
        echo "anal fcst post vrfy arch"
        echo "eobs eomg eupd ecen efcs epos earc"
        exit 1
    
    fi
    
    step=$1
    
    echo "BEGIN: config.resources"

    if [[ "$step" == "prep" ]] ; then
        export npe_prep={doc.resources.run_prep.total_ranks()}
        export npe_node_prep={doc.nodes.max_ranks_per_node(doc.resources.run_prep[0])}
    elif [[ "$step" == "prepbufr" ]] ; then
        export npe_prepbufr={doc.resources.run_prepbufr.total_ranks()}
        export npe_node_prepbufr={doc.nodes.max_ranks_per_node(doc.resources.run_prepbufr[0])}
    elif [[ "$step" == "anal" ]] ; then
        export npe_anal={doc.resources.run_anal.total_ranks()}
        export npe_node_anal={doc.nodes.max_ranks_per_node(doc.resources.run_anal[0])}
    elif [[ "$step" == "fcst" ]] ; then
        if [[ "${{CDUMP:-}}" == gdas ]] ; then
            export npe_fcst={doc.resources.run_gdasfcst.total_ranks()}
            export npe_node_fcst={doc.nodes.max_ranks_per_node(doc.resources.run_gdasfcst[0])}
        else
            export npe_fcst={doc.resources.run_gfsfcst.total_ranks()}
            export npe_node_fcst={doc.nodes.max_ranks_per_node(doc.resources.run_gfsfcst[0])}
        fi
    elif [[ "$step" == "post" ]] ; then
        if [[ "${{CDUMP:-}}" == gdas ]] ; then
            export npe_post={doc.resources.run_gdaspost.total_ranks()}
            export npe_node_post={doc.nodes.max_ranks_per_node(doc.resources.run_gdaspost[0])}
        else
            export npe_post={doc.resources.run_gfspost.total_ranks()}
            export npe_node_post={doc.nodes.max_ranks_per_node(doc.resources.run_gfspost[0])}
        fi
        export npe_node_dwn={doc.nodes.max_ranks_per_node(doc.resources.run_dwn[0])}
    elif [[ "$step" == "vrfy" ]] ; then
        export npe_vrfy={doc.resources.run_gdasvrfy.total_ranks()}
        export npe_node_vrfy={doc.nodes.max_ranks_per_node(doc.resources.run_gdasvrfy[0])}
        export npe_vrfy_gfs={doc.resources.run_gfsvrfy.total_ranks()}
        export npe_node_vrfy_gfs={doc.nodes.max_ranks_per_node(doc.resources.run_gfsvrfy[0])}

    elif [[ "$step" == "arch" ]] ; then
        export npe_arch={doc.resources.run_arch.total_ranks()}
        export npe_node_arch={doc.nodes.max_ranks_per_node(doc.resources.run_arch[0])}
    elif [[ "$step" == "earc" ]] ; then
        export npe_earc={doc.resources.run_earc.total_ranks()}
        export npe_node_earc={doc.nodes.max_ranks_per_node(doc.resources.run_earc[0])}
    elif [[ "$step" == "getic" ]] ; then
        export npe_getic={doc.resources.run_getic.total_ranks()}
        export npe_node_getic={doc.nodes.max_ranks_per_node(doc.resources.run_getic[0])}
    elif [[ "$step" == "eobs" ]] ; then
        export npe_eobs={doc.resources.run_eobs.total_ranks()}
        export npe_node_eobs={doc.nodes.max_ranks_per_node(doc.resources.run_eobs[0])}
    elif [[ "$step" == "eomg" ]] ; then
        export npe_getic={doc.resources.run_eomg.total_ranks()}
        export npe_node_eomg={doc.nodes.max_ranks_per_node(doc.resources.run_eomg[0])}
    elif [[ "$step" == "eupd" ]] ; then
        export npe_eupd={doc.resources.run_eupd.total_ranks()}
        export npe_node_eupd={doc.nodes.max_ranks_per_node(doc.resources.run_eupd[0])}
    elif [[ "$step" == "ecen" ]] ; then
        export npe_ecen={doc.resources.run_ecen.total_ranks()}
        export npe_node_ecen={doc.nodes.max_ranks_per_node(doc.resources.run_ecen[0])}
    elif [[ "$step" == "efcs" ]] ; then
        export npe_efcs={doc.resources.run_efcs.total_ranks()}
        export npe_node_efcs={doc.nodes.max_ranks_per_node(doc.resources.run_efcs[0])}
    elif [[ "$step" == "epos" ]] ; then
        export npe_epos={doc.resources.run_epos.total_ranks()}
        export npe_node_epos={doc.nodes.max_ranks_per_node(doc.resources.run_epos[0])}
    else
    
        echo "Invalid step = $step, ABORT!"
        exit 2
    
    fi
    
    echo "END: config.resources"
